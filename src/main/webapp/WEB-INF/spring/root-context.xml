<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	
	<!-- 공통 로직 -->
	<!-- <bean class="com.choa.aspect.CardCheck" id="cardCheck"></bean>
	
	<aop:config>
		<aop:aspect id="cardAspect" ref="cardCheck">
		
			aspect는 공통사항이 무엇인지 저장하는것 - card or reserve
			하나의 단위를 aspect로 묶어준다
			.. : 하위의 모든 디렉터리
			*() : 하위의 모든 메서드
			*(..) : 매개변수가 있던 없던 모든 메서드
			(..) : 모든 매개변수
		
		
		<aop:pointcut expression="execution(* com.choa.aspect..Transport.*(..))" id="trans"/>
		<aop:around method="check" pointcut-ref="trans"/>
		CardCheck안에 있는 메서드중에서 check라는 메서드를 사용할 것
		</aop:aspect>
		
		<aop:aspect id="cardReserve" ref="cardCheck">
			<aop:pointcut expression="execution(* com.choa.aspect..Trip.*(..))" id="reserve"/>
			<aop:before method="reservation" pointcut-ref="reserve"/>
		
		</aop:aspect>
	</aop:config> -->
	
	
	
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- 외부에서 properties 파일을 통해 받아오기  -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" id="propertyPlaceholderConfigurer">
		<property name="locations">
			<value>classpath:myBatis/myBatis.properties</value>
		</property>
	</bean>	
		
	
	<!-- 1. dataSource -->
	<bean class="org.springframework.jdbc.datasource.DriverManagerDataSource" id="dataSource">
		<property name="username" value="${jdbc.user}"/>
		<property name="password" value="${jdbc.pw}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="driverClassName" value="${jdbc.driver}"/>
	</bean>

	
	<!-- 2. Connection, Mapper 연결하기 -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="mapperLocations" value="classpath:mappers/**/*Mapper.xml"/>
		<property name="configLocation" value="classpath:myBatis/mybatis-config.xml"></property>
	</bean>
	
	
	<!-- 3. DAO 사용할거 -->
	<!-- mybatis와 class를 연결해주는! 생성자를 이용. DAO같은 -->
	<bean class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean"/>
	</bean>
	
	<!-- 트랜잭션 관리자 -->
	<bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transaction">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- Annotation을 활성화 시키겟다? servlet에는 자동으로 생성 -->
	<tx:annotation-driven/>
	
	
	<!-- 공통사항을 언제 어디다가 넣어줄건지 
	Exception이 발생했을 때, RollBack하겟....
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="*" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut expression="execution(* com.choa.table..TableService.*(..))" id="requiredTx"/>
		외부에 있는 Adviser을 사용하겠다.
		<aop:advisor advice-ref="txAdvice" pointcut-ref="requiredTx"/>
	
	</aop:config>
	 -->
	
	
	<!-- 파일업로드에 필요 -->
	<bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver">
		<property name="defaultEncoding" value="UTF-8"/>
		<!-- 보통은 max~~size도 잡아준다  -->
	</bean>
	
	
</beans>
